{"version":3,"sources":["image/logo.png","components/map-block/index.js","components/map-block/map-block.js","components/query-history/queryHistory.js","components/chart/chart.js","components/company-description/CompanyDescription.js","components/fullDescription/fullDescription.js","components/companyList/companyList.js","components/header/header.js","helpers/helpers.js","components/search-block/SearchBlock.js","components/search-block/SearchBlockContainer.js","App.js","services/service.js","AppContainer.js","index.js"],"names":["module","exports","MapBlock","getStatement","verificatePartner","getInformation","list","loading","company","setLoadingFalse","useState","zoom","setZoom","center","setCenter","useEffect","point","className","size","query","ns","load","style","width","height","defaultState","controls","defaultGeometry","properties","balloonContentBody","НаимПолнЮЛ","ФИОПолн","ИНН","ОГРН","АдресПолн","Статус","ОснВидДеят","map","i","key","options","float","type","onClick","to","НаимСокрЮЛ","icon","DownloadOutlined","QueryHistory","menu","historyList","onSearchCompany","toggleMenu","length","id","items","item","name","display","position","Chart","positive","negative","innerRadius","padAngle","data","stroke","strokeWidth","colorScale","x","y","Object","keys","Panel","Collapse","CompanyDescription","status","active","overflowY","fontSize","marginLeft","header","marginTop","margin","FullDescription","information","Array","isArray","CompanyListContainer","withRouter","history","companyNull","onGetCompany","push","activeClassName","HeaderContainer","src","logo","alt","UnorderedListOutlined","checkedRegion","regions","regId","check","reg","checked","SearchBlock","error","clearCheckbox","submit","submitRegion","inputChange","inputFilterChange","cancelRegion","inputFilter","input","setDisplay","visibleRegions","placeholder","value","onChange","htmlType","SearchOutlined","message","description","showIcon","document","body","clientWidth","visible","onOk","onCancel","footer","textAlign","SearchBlockContainer","getRegion","onClearCheckbox","regionsListState","updateRegions","regionchiki","createRegion","setInput","setFilterInput","checkboxList","setCheckboxList","setRegions","prevRegions","region","unChecked","index","findIndex","slice","arr","filter","toLowerCase","indexOf","search","htmlFor","event","preventDefault","target","newArr","App","searchCompany","getCoordinates","onGetStatement","onGetInformation","getCompany","Positive","Negative","fullInformation","setMenu","path","render","onGetCoordinates","exact","_apiKey","_corsAnywhere","apiFNS","axios","res","INN","_transformVerification","ЮЛ","ИП","partner","Позитив","Негатив","_apiYandex","apiYandex","response","GeoObjectCollection","featureMember","GeoObject","Point","pos","AppContainerWithRouter","setList","setCompany","setError","setLoading","setPositive","setNegative","setHistoryList","setFullInformation","localStorage","getItem","JSON","parse","setItem","stringify","getCoordinatesCompany","companyList","then","prevList","split","newItem","hasOwnProperty","ГдеНайдено","querySelectorAll","forEach","el","regionsList","newRegions","concat","from","Set","window","open","companyName","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.6385942e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0449d2d5.png\";","import MapBlock from './map-block';\r\n\r\nexport default MapBlock;","import React from 'react';\r\nimport { YMaps, Map, Placemark, GeolocationControl } from 'react-yandex-maps';\r\n\r\nimport './map-block.scss';\r\nimport { Spin, Button } from 'antd';\r\nimport { useState, useEffect } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { DownloadOutlined } from '@ant-design/icons';\r\n\r\nconst MapBlock = ({ getStatement, verificatePartner, getInformation, list, loading, company, setLoadingFalse }) => {\r\n\r\n  const [zoom, setZoom] = useState(11),\r\n    [center, setCenter] = useState([54.75, 56.00]);\r\n\r\n  useEffect(() => {\r\n    if (company) {\r\n      setLoadingFalse();\r\n      setZoom(17);\r\n      setCenter([company.point[1], company.point[0]])\r\n    }\r\n  }, [company]);\r\n\r\n\r\n  return (\r\n\r\n    <div className=\"map\">\r\n\r\n      {loading\r\n\r\n        ? <Spin size=\"large\" />\r\n\r\n        : <YMaps query={{\r\n          ns: 'use-load-option',\r\n          load:\r\n            'Map,Placemark,control.ZoomControl,control.FullscreenControl,geoObject.addon.balloon',\r\n        }}>\r\n\r\n          <Map style={{ width: '100%', height: 560 }}\r\n            defaultState={{\r\n              center: center,\r\n              zoom: zoom,\r\n              controls: ['zoomControl', 'fullscreenControl']\r\n            }}\r\n          >\r\n            {company\r\n              ? <Placemark defaultGeometry={[company.point[1], company.point[0]]}\r\n                properties={{\r\n                  balloonContentBody:\r\n                    `<b>Наименование:</b> ${company.НаимПолнЮЛ || company.ФИОПолн} <hr>\r\n                <b>ИНН:</b> ${company.ИНН}<hr>\r\n                <b>ОГРН:</b> ${company.ОГРН}<hr>\r\n                <b>Адрес:</b> ${company.АдресПолн}<hr>\r\n                <b>Статус:</b> ${company.Статус}<hr>\r\n                <b>Вид деятельности:</b> ${company.ОснВидДеят}`\r\n                }} />\r\n              : list\r\n                ? list.map((i) => {\r\n\r\n                  return <Placemark key={i.ИНН} defaultGeometry={[i.point[1], i.point[0]]}\r\n                    properties={{\r\n                      balloonContentBody:\r\n                        `<b>Наименование:</b> ${i.НаимПолнЮЛ || i.ФИОПолн}<hr>\r\n                      <b>ИНН:</b> ${i.ИНН}<hr>\r\n                      <b>ОГРН:</b> ${i.ОГРН}<hr>\r\n                      <b>Адрес:</b> ${i.АдресПолн}<hr>\r\n                      <b>Статус:</b> ${i.Статус}<hr>\r\n                      <b>Вид деятельности:</b> ${i.ОснВидДеят}`\r\n                    }} />\r\n                })\r\n                : null\r\n            }\r\n\r\n\r\n            <GeolocationControl options={{ float: 'left' }} />\r\n          </Map>\r\n\r\n        </YMaps >\r\n      }\r\n\r\n\r\n      {company &&\r\n        <div className=\"map__buttons\">\r\n\r\n          <Button className=\"map__button\"\r\n            type='primary'\r\n            onClick={verificatePartner}>\r\n\r\n            <NavLink to={`/home/company_list/${company.НаимСокрЮЛ}/check`}>\r\n              Проверить контрагента\r\n                    </NavLink>\r\n\r\n          </Button>\r\n\r\n          <Button className=\"map__button button_margin\"\r\n            type='primary'\r\n            onClick={getInformation}>\r\n\r\n            <NavLink to={`/home/company_list/${company.НаимСокрЮЛ}/full_information`}>\r\n              Полная информация\r\n                    </NavLink>\r\n\r\n          </Button>\r\n\r\n          <Button className=\"map__button button_margin\"\r\n            type='primary'\r\n            onClick={getStatement}\r\n            icon={<DownloadOutlined />} size='middle' >\r\n\r\n            Получить выписку\r\n                  </Button>\r\n\r\n        </div>\r\n      }\r\n\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MapBlock;","import React from 'react';\r\n\r\nimport './queryHistory.scss'\r\n\r\nconst QueryHistory = ({ menu, historyList, onSearchCompany, toggleMenu }) => {\r\n\r\n    if (historyList.length === 0) {\r\n        return null;\r\n    }\r\n    let id = 0;\r\n    const items = historyList.map((item) => {\r\n        id++\r\n        return (\r\n            <div key={id} className='history__item'>\r\n                <span onClick={() => onSearchCompany(item.name)}>\r\n                    {item.name}\r\n                </span>\r\n                <hr />\r\n            </div>\r\n        );\r\n    });\r\n\r\n    return (\r\n        <div className=\"history\" style={{\r\n            display: menu\r\n        }}>\r\n            <div style={{ position: \"relative\" }}>\r\n\r\n                <span className=\"history_close\" onClick={toggleMenu}>\r\n                    &times;\r\n                </span>\r\n\r\n                <p className=\"history__title\">\r\n                    История запросов\r\n                </p>\r\n\r\n                {items}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QueryHistory;","import React from 'react';\r\nimport { VictoryPie } from 'victory';\r\n\r\nconst Chart = ({ positive, negative }) => {\r\n\r\n    return (\r\n        <div className=\"chart\">\r\n\r\n            <VictoryPie width={330} height={330} innerRadius={60}\r\n                padAngle={5}\r\n                style={{\r\n                    data: {\r\n                        stroke: \"#c43a31\", strokeWidth: 1\r\n                    }\r\n                }}\r\n                colorScale={[\"rgb(230, 118, 137)\", \"#74A8DA\"]}\r\n                data={[\r\n                    { x: \"Neg\", y: Object.keys(negative).length - 1 },\r\n                    { x: \"Pos\", y: Object.keys(positive).length - 1 }\r\n                ]}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Chart;","import React from 'react';\r\nimport Chart from '../chart/chart';\r\n\r\nimport './companyDescription.scss';\r\nimport { Spin, Collapse } from 'antd';\r\nconst { Panel } = Collapse;\r\n\r\nconst CompanyDescription = ({ positive, negative, status }) => {\r\n\r\n  const active = status === \"Действующее\" ? 'active' : 'unActive';\r\n\r\n  return (\r\n    <div className=\"information\">\r\n      {!positive || !negative\r\n\r\n        ? <Spin style={{ margin: '100px auto' }} size=\"large\" />\r\n\r\n        : <div style={{ overflowY: 'scroll' }} className=\"information__wrapper description\">\r\n\r\n          <div>\r\n            <b style={{ fontSize: 17 }}>Позитивные факторы:</b>\r\n            {Object.keys(positive).length > 0\r\n\r\n              ? Object.keys(positive).map((item) => {\r\n\r\n                if (typeof positive[item] === 'object') {\r\n\r\n                  return <Collapse key={item} style={{ marginLeft: 7 }}>\r\n                    <Panel header={item}>\r\n                      {Object.keys(positive[item]).map((i) => {\r\n\r\n                        return (\r\n                          <span key={i}>\r\n                            <span>\r\n                              <b>{i}:</b> {positive[item][i]}\r\n                            </span>\r\n                            <hr />\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </Panel>\r\n                  </Collapse>\r\n                }\r\n\r\n                return <p key={item} style={{ marginLeft: 15 }}>\r\n                  <b>{item}:</b> {positive[item]}\r\n                </p>\r\n\r\n              })\r\n              : <p style={{ marginLeft: 15 }}>Позитивные факторы отсутствуют</p>\r\n            }\r\n          </div>\r\n          <hr />\r\n          <div style={{ marginTop: 20 }}>\r\n\r\n            <b style={{ fontSize: 17 }}>Негативные факторы:</b>\r\n\r\n            {Object.keys(negative).length > 0\r\n              ? Object.keys(negative).map((item) => {\r\n\r\n                if (typeof negative[item] === 'object') {\r\n\r\n                  return <Collapse key={item} style={{ marginLeft: 7 }}>\r\n                    <Panel header={item}>\r\n                      {Object.keys(negative[item]).map((i) => {\r\n                        return (\r\n                          <span key={i}>\r\n                            <span>\r\n                              <b>{i}:</b> {negative[item][i]}\r\n                            </span>\r\n                            <hr />\r\n                          </span>\r\n                        );\r\n                      })}\r\n                    </Panel>\r\n                  </Collapse>\r\n                }\r\n\r\n                return <p key={item} style={{ marginLeft: 15 }}>\r\n                  <b>{item}:</b> {negative[item]}\r\n                </p>;\r\n              })\r\n              : <p style={{ marginLeft: 15 }}>Негативные факторы отсутствуют</p>\r\n            }\r\n          </div>\r\n          <hr />\r\n          <p>Статус: <span className={active}>{status}</span></p>\r\n\r\n          <Chart positive={positive}\r\n            negative={negative} />\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CompanyDescription;","import React from 'react';\r\n\r\nimport './fullDescription.scss';\r\nimport { Spin, Collapse } from 'antd';\r\nconst { Panel } = Collapse;\r\n\r\nconst FullDescription = ({ information }) => {\r\n\r\n  return (\r\n\r\n    <div className=\"information\">\r\n      {!information\r\n\r\n        ? <Spin style={{ margin: '100px auto' }} size=\"large\" />\r\n\r\n        : <div className=\"information__wrapper fullDescription\">\r\n\r\n          <div>\r\n            <b style={{ fontSize: 17 }}>Полная информация:</b>\r\n            <div style={{ overflowY: 'scroll', height: 575 }}>\r\n              {\r\n                Object.keys(information).map((item) => {\r\n\r\n                  if (Array.isArray(information[item])) {\r\n\r\n                    information[item].map((i) => {\r\n                      return null\r\n                    })\r\n                  }\r\n\r\n                  if (typeof information[item] === 'object') {\r\n\r\n                    return <Collapse key={item} style={{ marginLeft: 7 }}>\r\n                      <Panel header={item} key={item}> {Object.keys(information[item]).map((i) => {\r\n\r\n                        return (\r\n                          <span key={i}>\r\n                            <span>\r\n                              <b>{i}:</b> {information[item][i]}\r\n                            </span>\r\n                            <hr />\r\n                          </span>\r\n                        );\r\n                      })}\r\n                      </Panel>\r\n                    </Collapse>\r\n                  }\r\n\r\n                  return <div key={item} style={{ marginLeft: 7 }}>\r\n                    <span>\r\n                      <b>{item}:</b> {information[item]}\r\n                    </span>\r\n                    <hr />\r\n                  </div>\r\n                })\r\n              }\r\n            </div>\r\n          </div>\r\n\r\n        </div>\r\n      }\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default FullDescription;","import React from 'react';\r\n\r\nimport './companyList.scss';\r\nimport { Spin } from 'antd';\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { useEffect } from 'react';\r\n\r\nconst CompanyList = ({ history, companyNull, list, onGetCompany, loading }) => {\r\n\r\n  useEffect(() => {\r\n    companyNull();\r\n\r\n    if (!loading) {\r\n      history.push(\"/home\");\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"information\">\r\n      {loading\r\n\r\n        ? <Spin style={{ margin: '0 auto' }} size=\"large\" />\r\n\r\n        : <div className=\"information__wrapper\">\r\n\r\n          <h3>Найдено организаций: {list.length}</h3>\r\n\r\n          <div style={{ overflowY: 'scroll', height: 575 }}>\r\n            {\r\n              list.map((item) => {\r\n\r\n                return <div key={item.ИНН}\r\n                  onClick={() => onGetCompany(item)}\r\n                  className='company'>\r\n\r\n                  <NavLink to={`/home/company_list/${item.НаимСокрЮЛ}`}\r\n                    activeClassName='company_active' >\r\n\r\n                    {item.НаимПолнЮЛ || item.ФИОПолн}\r\n\r\n                  </NavLink><br />\r\n                  <span>{item.АдресПолн}</span>\r\n                  <p>\r\n                    Статус:\r\n            <span className={\r\n                      item.Статус === \"Действующее\" ? 'active' : 'unActive'\r\n                    }>\r\n\r\n                      {item.Статус}\r\n                    </span>\r\n                  </p>\r\n                  <hr />\r\n\r\n                </div>\r\n              })\r\n            }\r\n          </div>\r\n        </div>\r\n      }\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nconst CompanyListContainer = withRouter(CompanyList)\r\n\r\nexport default CompanyListContainer;","import React from 'react';\r\n\r\nimport './header.scss';\r\nimport logo from '../../image/logo.png';\r\nimport { withRouter } from 'react-router-dom';\r\nimport { Button } from 'antd';\r\n\r\nimport { UnorderedListOutlined } from '@ant-design/icons';\r\n\r\nconst Header = ({ history, companyNull, toggleMenu }) => {\r\n\r\n    return (\r\n        <div className=\"header\">\r\n\r\n            <div className=\"header__wrapper\">\r\n\r\n                <img className=\"logo\" src={logo} alt=\"logo\" onClick={() => {\r\n                    history.push('/home');\r\n                    companyNull();\r\n                }} />\r\n\r\n                <span className=\"name\">\r\n                    ФНС проверка контрагента\r\n                </span>\r\n\r\n                <Button onClick={toggleMenu} className=\"menu\" type=\"primary\" icon={<UnorderedListOutlined />} size=\"large\"></Button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nconst HeaderContainer = withRouter(Header);\r\n\r\nexport default HeaderContainer;","export function search(arr, input) {\r\n\r\n    if (input.length === 0) {\r\n        return arr;\r\n    }\r\n\r\n    return arr.filter((region) => {\r\n\r\n        return region.key.toLowerCase().indexOf(input.toLowerCase()) > -1;\r\n    })\r\n}\r\n\r\nexport const checkedRegion = (regions, regId, check) => {\r\n\r\n    return regions.map((reg) => {\r\n\r\n        if (reg.id === regId) {\r\n            return { ...reg, checked: check }\r\n        }\r\n        return reg\r\n    })\r\n}\r\n","import React from 'react';\r\nimport { Form, Input, Button, Alert, Modal } from 'antd';\r\n\r\nimport { SearchOutlined } from '@ant-design/icons'\r\nimport './SearchBlock.scss';\r\n\r\nimport { UnorderedListOutlined } from '@ant-design/icons';\r\n\r\n\r\nconst SearchBlock = ({ error, clearCheckbox, submit, submitRegion, inputChange, inputFilterChange, cancelRegion, inputFilter, display, input, setDisplay, visibleRegions }) => {\r\n\r\n  return (\r\n    <div>\r\n\r\n      <Form className=\"search__company\">\r\n        <Input placeholder=\"Например: 'угату'\"\r\n          value={input}\r\n          onChange={inputChange} />\r\n\r\n        <Button type=\"primary\"\r\n          htmlType=\"submit\"\r\n          icon={<SearchOutlined />}\r\n          onClick={submit}>\r\n\r\n          Поиск\r\n        </Button>\r\n\r\n        {error &&\r\n          <Alert style={{ width: 400, margin: '5px auto 0' }}\r\n            message=\"Ошибка\"\r\n            description=\"Поле не может быть пустым.\"\r\n            type=\"error\"\r\n            showIcon\r\n          />\r\n        }\r\n\r\n        {document.body.clientWidth <= 450\r\n\r\n          ? <Button className=\"region_btn\" icon={<UnorderedListOutlined />} style={{ marginLeft: 5, width: '40px', height: '40px' }} onClick={() => setDisplay(true)} type=\"default\"></Button>\r\n\r\n          : <Button className=\"region_btn\" icon={<UnorderedListOutlined />} style={{ marginLeft: 5 }} onClick={() => setDisplay(true)} type=\"default\">Выбрать регионы</Button>\r\n        }\r\n\r\n      </Form>\r\n\r\n\r\n      <Modal className=\"search__region\"\r\n        visible={display}\r\n        onOk={submitRegion}\r\n        onCancel={() => setDisplay(false)}\r\n        footer={[\r\n          <Button onClick={clearCheckbox} style={{ marginLeft: 10 }} type='primary'>Сбросить</Button>,\r\n\r\n          <Button onClick={submitRegion}\r\n            htmlType=\"submit\"\r\n            style={{ marginLeft: 180 }}\r\n            type='primary'>Ок\r\n          </Button>,\r\n\r\n          <Button onClick={cancelRegion} style={{ marginLeft: 5 }} type=\"default\">Отмена</Button>\r\n        ]} >\r\n\r\n        <h3>Выбрать регионы</h3>\r\n        <Form>\r\n\r\n          <Input style={{\r\n            width: '100%', margin: '0 auto 5px', textAlign: 'center'\r\n          }}\r\n            placeholder=\"Введите регион\"\r\n            onChange={inputFilterChange}\r\n            value={inputFilter} />\r\n\r\n          <ul>\r\n            {visibleRegions}\r\n          </ul>\r\n\r\n        </Form>\r\n      </Modal>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SearchBlock;\r\n","import React, { useState } from 'react';\r\n\r\nimport './SearchBlock.scss';\r\nimport { checkedRegion, search } from '../../helpers/helpers';\r\nimport { useEffect } from 'react';\r\nimport SearchBlock from './SearchBlock';\r\n\r\nconst SearchBlockContainer = ({ getRegion, onSearchCompany, error, onClearCheckbox, regionsListState, updateRegions }) => {\r\n\r\n    const regionchiki = ['Москва', 'Санкт-Петербург', 'Адыгея', 'Башкортостан', 'Бурятия', 'Алтай', 'Дагестан', 'Ингушетия', 'Кабардино-Балкарская', 'Калмыкия', 'Карачаево-Черкесская', 'Карелия', 'Коми', 'Марий Эл', 'Мордовия', 'Саха', 'Северная Осетия', 'Татарстан', 'Тыва', 'Удмуртская', 'Хакасия', 'Чеченская', 'Чувашская', 'Алтайский', 'Краснодарский', 'Красноярский', 'Приморский', 'Ставропольский', 'Хабаровский', 'Амурская', 'Архангельская', 'Астраханская', 'Белгородская', 'Брянская', 'Владимирская', 'Волгоградская', 'Воронежская', 'Ивановская', 'Иркутская', 'Калининградская', 'Калужская', 'Камчатский', 'Кемеровская', 'Кировская', 'Костромская', 'Курганская', 'Курская', 'Ленинградская', 'Липецкая', 'Магаданская', 'Московская', 'Мурманская', 'Нижегородская', 'Новгородская', 'Новосибирская', 'Омская', 'Оренбургская', 'Орловская', 'Пензенская', 'Пермский', 'Псковская', 'Ростовская', 'Рязанская', 'Самарская', 'Саратовская', 'Сахалинская', 'Свердловская', 'Смоленская', 'Тамбовская', 'Тверская', 'Томская', 'Тульская', 'Тюменская', 'Ульяновская', 'Челябинская', 'Забайкальский', 'Ярославская', 'Еврейская', 'Ханты-Мансийский', 'Чукотский', 'Ямало-Ненецкий', 'Крым', 'Севастополь', 'Байконур'];\r\n\r\n    let id = 0;\r\n    const createRegion = (name) => {\r\n        return { id: id++, name: name, checked: false }\r\n    }\r\n\r\n    const [input, setInput] = useState(''),\r\n        [inputFilter, setFilterInput] = useState(''),\r\n        [display, setDisplay] = useState(false),\r\n        [checkboxList, setCheckboxList] = useState(regionsListState),\r\n        [regions, setRegions] = useState([]);\r\n\r\n    useEffect(() => {\r\n\r\n        regionchiki.map((reg) => {\r\n            setRegions((prevRegions) => [\r\n                ...prevRegions,\r\n                createRegion(reg)\r\n            ]);\r\n        })\r\n\r\n    }, []);\r\n\r\n\r\n    const checked = (regId, region) => {\r\n\r\n        setCheckboxList([...checkboxList, region])\r\n        setRegions(checkedRegion(regions, regId, true))\r\n    }\r\n    const unChecked = (regId, region) => {\r\n\r\n        checkboxList.map((reg) => {\r\n\r\n            if (reg === region) {\r\n\r\n                const index = checkboxList.findIndex((item) => item === region);\r\n\r\n                setCheckboxList(() => [\r\n                    ...checkboxList.slice(0, index),\r\n                    ...checkboxList.slice(index + 1)\r\n                ]);\r\n\r\n                updateRegions(index);\r\n            }\r\n        });\r\n\r\n\r\n        setRegions(checkedRegion(regions, regId, false));\r\n    }\r\n\r\n    const cancelRegion = () => {\r\n\r\n        if (!checkboxList.length) {\r\n            setDisplay(false);\r\n            return\r\n        }\r\n        setCheckboxList(regionsListState);\r\n        setDisplay(false);\r\n\r\n\r\n        if (regionsListState.length) {\r\n            regions.map((region) => {\r\n\r\n                let check = 0;\r\n                regionsListState.map((reg) => {\r\n\r\n                    if (region.name === reg) {\r\n\r\n                        check++;\r\n                        setRegions((prevRegions) => [\r\n                            ...prevRegions.slice(0, region.id),\r\n                            { ...region, checked: true },\r\n                            ...prevRegions.slice(region.id + 1),\r\n                        ]);\r\n\r\n                    } else {\r\n                        if (check > 0) {\r\n                            return\r\n                        }\r\n                        setRegions((prevRegions) => {\r\n\r\n                            return [\r\n                                ...prevRegions.slice(0, region.id),\r\n                                { ...region, checked: false },\r\n                                ...prevRegions.slice(region.id + 1),\r\n                            ]\r\n                        });\r\n                    }\r\n                });\r\n            });\r\n        } else {\r\n\r\n            const newArr = regions.map((region) => {\r\n                return { ...region, checked: false }\r\n            });\r\n\r\n            setRegions(newArr);\r\n        }\r\n    }\r\n\r\n    const submitRegion = (event) => {\r\n        event.preventDefault();\r\n        getRegion(checkboxList);\r\n        setDisplay(false);\r\n    }\r\n\r\n    const inputChange = (event) => {\r\n        setInput(event.target.value)\r\n    }\r\n\r\n    const inputFilterChange = (event) => {\r\n        setFilterInput(event.target.value)\r\n    }\r\n\r\n    const submit = (event) => {\r\n        event.preventDefault();\r\n        onSearchCompany(input);\r\n        setInput('');\r\n    }\r\n\r\n    const clearCheckbox = () => {\r\n\r\n        onClearCheckbox();\r\n\r\n        if (checkboxList.length) {\r\n\r\n            setRegions([]);\r\n            setCheckboxList([]);\r\n\r\n            regionchiki.map((reg) => {\r\n                setRegions((prevRegions) => [\r\n                    ...prevRegions,\r\n                    createRegion(reg)\r\n                ]);\r\n            })\r\n        }\r\n    }\r\n\r\n    const regionsList = regions.map((region) => {\r\n\r\n        return (\r\n\r\n            <li style={{ textAlign: 'left', marginLeft: 10 }} key={region.name}>\r\n                {region.checked\r\n\r\n                    ? <input checked id={region.id}\r\n                        type=\"checkbox\"\r\n                        onClick={() => unChecked(region.id, region.name)}\r\n                        value={region.name} />\r\n\r\n                    : <input id={region.id}\r\n                        type=\"checkbox\"\r\n                        onClick={() => checked(region.id, region.name)}\r\n                        value={region.name} />\r\n                }\r\n\r\n                <label style={{ marginLeft: 3 }} htmlFor={region.id}>\r\n                    {region.name}\r\n                </label>\r\n                <hr />\r\n            </li>\r\n        );\r\n    });\r\n\r\n    const visibleRegions = search(regionsList, inputFilter);\r\n\r\n    return (\r\n        <SearchBlock clearCheckbox={clearCheckbox} submit={submit}\r\n            inputFilterChange={inputFilterChange} inputChange={inputChange}\r\n            submitRegion={submitRegion} cancelRegion={cancelRegion}\r\n            checked={checked} unChecked={unChecked}\r\n            error={error} inputFilter={inputFilter} display={display} regions={regions} input={input} setDisplay={setDisplay} visibleRegions={visibleRegions} />\r\n    );\r\n}\r\n\r\nexport default SearchBlockContainer;\r\n","import React from 'react';\r\n\r\nimport 'antd/dist/antd.css';\r\nimport './App.scss';\r\n\r\nimport MapBlock from './components/map-block';\r\nimport QueryHistory from './components/query-history/queryHistory';\r\nimport CompanyDescription from './components/company-description/CompanyDescription';\r\nimport FullDescription from './components/fullDescription/fullDescription';\r\nimport { Route, Switch, Redirect } from 'react-router-dom';\r\nimport CompanyList from './components/companyList/companyList';\r\nimport HeaderContainer from './components/header/header';\r\nimport { useState } from 'react';\r\nimport SearchBlockContainer from './components/search-block/SearchBlockContainer';\r\n\r\nconst App = ({ error, searchCompany, clearCheckbox, getRegion, getCoordinates, list, loading, verificatePartner, onGetStatement, onGetInformation, company, setLoadingFalse, getCompany, Positive, Negative, fullInformation, historyList, companyNull, regions, updateRegions }) => {\r\n\r\n  const [menu, setMenu] = useState('none')\r\n\r\n  const toggleMenu = () => {\r\n\r\n    if (menu === 'block') {\r\n      setMenu('none');\r\n    } else {\r\n      setMenu('block');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"main\">\r\n\r\n      <HeaderContainer companyNull={companyNull}\r\n        toggleMenu={toggleMenu} />\r\n\r\n      <div className=\"search\">\r\n        <div className=\"search__wrapper\">\r\n\r\n          <Route path='/home' render={() => {\r\n\r\n            return <div>\r\n              <SearchBlockContainer onSearchCompany={searchCompany}\r\n                error={error}\r\n                onClearCheckbox={clearCheckbox}\r\n                getRegion={getRegion}\r\n                regionsListState={regions}\r\n                updateRegions={updateRegions} />\r\n\r\n              <MapBlock list={list}\r\n                onGetCoordinates={getCoordinates}\r\n                loading={loading}\r\n                verificatePartner={verificatePartner}\r\n                getStatement={onGetStatement}\r\n                getInformation={onGetInformation}\r\n                company={company}\r\n                setLoadingFalse={setLoadingFalse} />\r\n            </div>\r\n          }}\r\n          />\r\n\r\n          <Switch>\r\n\r\n            <Route exact path='/home/company_list' render={() =>\r\n\r\n              <CompanyList companyNull={companyNull}\r\n                list={list}\r\n                onGetCompany={getCompany}\r\n                loading={loading} />}\r\n            />\r\n            <Route exact path={`/home/company_list/:company/check`} render={() =>\r\n\r\n              <CompanyDescription status={company.Статус}\r\n                positive={Positive}\r\n                negative={Negative} />}\r\n            />\r\n            <Route exact path='/home/company_list/:company/full_information' render={() =>\r\n\r\n              <FullDescription information={fullInformation} />}\r\n            />\r\n\r\n            <Route exact path=\"/\" render={() => <Redirect to=\"/home\" />} />\r\n\r\n          </Switch>\r\n\r\n          <QueryHistory menu={menu}\r\n            onSearchCompany={searchCompany}\r\n            historyList={historyList}\r\n            toggleMenu={toggleMenu} />\r\n\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","import * as axios from \"axios\";\r\n\r\nconst _apiKey = '&key=28ee5ed0c60169dc4de6a13d9ea21cf235e868c7',\r\n  _apiFNS = 'https://api-fns.ru/api/search?q=',\r\n  _corsAnywhere = 'https://cors-anywhere.herokuapp.com/';\r\n\r\nexport const apiFNS = {\r\n\r\n  async getCompany(query) {\r\n\r\n    const res = await axios.get(`${_corsAnywhere}${_apiFNS}${query}${_apiKey}`);\r\n    return res.data.items;\r\n  },\r\n\r\n  async verificationPartner(INN) {\r\n\r\n    const query = await axios.get(`${_corsAnywhere}https://api-fns.ru/api/check?req=${INN}${_apiKey}`);\r\n    return _transformVerification(query.data.items[0].ЮЛ || query.data.items[0].ИП);\r\n  },\r\n\r\n  async getStatement(INN) {\r\n\r\n    return `https://api-fns.ru/api/vyp?req=${INN}${_apiKey}`;\r\n  },\r\n\r\n  async getFullInformation(INN) {\r\n\r\n    const query = await axios.get(`${_corsAnywhere}https://api-fns.ru/api/egr?req=${INN}&key=${_apiKey}`);\r\n    return query.data.items[0].ЮЛ || query.data.items[0].ИП;\r\n  }\r\n}\r\n\r\nconst _transformVerification = (partner) => {\r\n\r\n  return {\r\n    Positive: partner.Позитив,\r\n    Negative: partner.Негатив\r\n  }\r\n}\r\n\r\nconst _apiKeyYandex = 'fbe27a07-f3ff-4ee7-b8a6-801e7e021216',\r\n  _apiYandex = `https://geocode-maps.yandex.ru/1.x/?format=json&apikey=${_apiKeyYandex}&geocode=`;\r\n\r\nexport const apiYandex = {\r\n\r\n  async getСoordinates(query) {\r\n\r\n    const res = await axios.get(`${_apiYandex}${query}`);\r\n    return res.data.response.GeoObjectCollection.featureMember[0].GeoObject.Point.pos;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\n\r\nimport App from './App';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\nimport { apiFNS, apiYandex } from './services/service';\r\n\r\nconst AppContainer = ({ history }) => {\r\n\r\n  const [list, setList] = useState([]),\r\n    [company, setCompany] = useState(null),\r\n    [error, setError] = useState(false),\r\n    [loading, setLoading] = useState(false),\r\n    [Positive, setPositive] = useState(null),\r\n    [Negative, setNegative] = useState(null),\r\n    [historyList, setHistoryList] = useState([]),\r\n    [fullInformation, setFullInformation] = useState(null),\r\n    [regions, setRegions] = useState([]);\r\n\r\n  const companyNull = () => {\r\n    setCompany(null)\r\n  }\r\n\r\n  useEffect(() => {\r\n\r\n    if (localStorage.getItem('company') !== null) {\r\n      const historyList = JSON.parse(localStorage.getItem('company'));\r\n\r\n      setHistoryList(historyList);\r\n    }\r\n  }, [])\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem('company', JSON.stringify(historyList));\r\n\r\n    if (localStorage.getItem('company') !== null) {\r\n\r\n      const historyList = JSON.parse(localStorage.getItem('company'));\r\n\r\n      if (historyList.length === 6) {\r\n\r\n        setHistoryList(historyList.slice(1))\r\n      }\r\n    }\r\n  })\r\n\r\n  const searchCompany = (name) => {\r\n\r\n    if (!name) {\r\n      setError(true)\r\n      return\r\n    } else {\r\n      setError(false)\r\n    }\r\n\r\n    history.push('/home/company_list');\r\n    const newItem = { name }\r\n\r\n    setList([]);\r\n    setHistoryList(() => {\r\n      return [\r\n        ...historyList, newItem\r\n      ]\r\n    });\r\n\r\n    setLoading(true);\r\n    setPositive(null);\r\n    setNegative(null);\r\n\r\n    apiFNS.getCompany(name)\r\n      .then((companyList) => {\r\n\r\n        companyList.map((item) => {\r\n\r\n          if (item.hasOwnProperty('ЮЛ')) {\r\n\r\n            if (item.ЮЛ.ГдеНайдено === 'ИНН') {\r\n\r\n              return getCoordinatesCompany([item.ЮЛ]);\r\n\r\n            } else if (item.ЮЛ.ГдеНайдено === 'ОГРН') {\r\n              return getCoordinatesCompany([item.ЮЛ]);\r\n\r\n            } else if (item.ЮЛ.ГдеНайдено.indexOf('Наименование ЮЛ' || 'ФИО') > -1) {\r\n              return getCoordinatesCompany([item.ЮЛ]);\r\n            }\r\n\r\n          } else if (item.hasOwnProperty('ИП')) {\r\n\r\n            return getCoordinatesCompany([item.ИП]);\r\n          }\r\n        })\r\n      });\r\n  }\r\n\r\n  const getCoordinatesCompany = (companyList) => {\r\n\r\n    companyList.map((i) => {\r\n\r\n      if (regions.length > 0) {\r\n\r\n        regions.map((item) => {\r\n\r\n          if (i.АдресПолн.indexOf(item) > -1) {\r\n\r\n            apiYandex.getСoordinates(i.АдресПолн)\r\n              .then((res) => {\r\n                setList((prevList) => [\r\n                  ...prevList,\r\n                  { ...i, point: res.split(' ') }\r\n                ]\r\n                );\r\n              })\r\n          }\r\n        })\r\n        return\r\n      }\r\n\r\n      apiYandex.getСoordinates(i.АдресПолн)\r\n        .then((res) => {\r\n\r\n          setList((prevList) => [\r\n            ...prevList,\r\n            { ...i, point: res.split(' ') }\r\n          ]\r\n          )\r\n        })\r\n    });\r\n\r\n    setLoading(false);\r\n  }\r\n\r\n  const verificatePartner = () => {\r\n\r\n\r\n    apiFNS.verificationPartner(company.ИНН)\r\n      .then((res) => {\r\n        setPositive(res.Positive);\r\n        setNegative(res.Negative);\r\n      });\r\n\r\n  }\r\n\r\n  const onGetStatement = () => {\r\n\r\n    apiFNS.getStatement(company.ИНН)\r\n      .then((res) => {\r\n        window.open(res);\r\n      })\r\n  }\r\n\r\n  const onGetInformation = () => {\r\n\r\n    apiFNS.getFullInformation(company.ИНН)\r\n      .then((res) => {\r\n        setFullInformation(res);\r\n      })\r\n  }\r\n\r\n  const getCompany = (companyName) => {\r\n\r\n    if (companyName === company) {\r\n      return\r\n    }\r\n    setLoading(true);\r\n    setCompany(companyName);\r\n  }\r\n\r\n  const setLoadingFalse = () => {\r\n    setLoading(false);\r\n  }\r\n\r\n  const getRegion = (regionsList) => {\r\n\r\n    if (!regions.length) {\r\n      setRegions(regionsList);\r\n      return\r\n    }\r\n\r\n    const newRegions = [...regions].concat(regionsList);\r\n    setRegions(Array.from(new Set(newRegions)));\r\n  }\r\n\r\n  const updateRegions = (id) => {\r\n\r\n    setRegions(() => [\r\n      ...regions.slice(0, id),\r\n      ...regions.slice(id + 1)\r\n    ])\r\n  }\r\n\r\n  const clearCheckbox = () => {\r\n    setRegions([]);\r\n\r\n    document.querySelectorAll('input[type=checkbox]').forEach(el => el.checked = false);\r\n  }\r\n\r\n  return <App regions={regions} error={error} searchCompany={searchCompany} clearCheckbox={clearCheckbox}\r\n    getRegion={getRegion} getCoordinates={getCoordinatesCompany} list={list} loading={loading}\r\n    verificatePartner={verificatePartner} onGetStatement={onGetStatement} onGetInformation={onGetInformation}\r\n    company={company} setLoadingFalse={setLoadingFalse} getCompany={getCompany} Positive={Positive} Negative={Negative}\r\n    fullInformation={fullInformation} historyList={historyList} companyNull={companyNull} updateRegions={updateRegions} />\r\n}\r\n\r\nconst AppContainerWithRouter = withRouter(AppContainer);\r\n\r\nexport default AppContainerWithRouter;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport AppContainerWithRouter from './AppContainer';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <AppContainerWithRouter />\r\n    </BrowserRouter>,\r\n    document.getElementById('root'));"],"sourceRoot":""}